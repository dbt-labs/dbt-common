[project]
name = "dbt-common"
dynamic = ["version"]
description = "The shared common utilities that dbt-core and adapter implementations use"
readme = "README.md"
requires-python = ">=3.8"
license = "Apache-2.0"
keywords = []
authors = [
  { name = "dbt Labs", email = "info@dbtlabs.com" },
]
maintainers = [
    { name = "dbt Labs", email = "info@dbtlabs.com" },
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "agate~=1.7.0",
  "colorama>=0.3.9,<0.5",
  "isodate>=0.6,<0.7",
  "jsonschema~=4.0",
  "Jinja2~=3.0",
  "mashumaro[msgpack]~=3.9",
  "pathspec>=0.9,<0.12",
  "protobuf>=4.0.0",
  "python-dateutil~=2.0",
  "requests<3.0.0",
  "typing-extensions~=4.4",
]

[project.optional-dependencies]
lint = [
    "black~=23.3",
    "flake8",
    "flake8-pyproject",
    "flake8-docstrings",
    "mypy~=1.3",
    "pytest~=7.3",  # needed for linting tests
    "types-Jinja2~=2.11",
    "types-jsonschema~=4.17",
    "types-protobuf~=4.24.0",
    "types-python-dateutil~=2.8",
    "types-PyYAML~=6.0",
    "types-requests"
]
test = [
    "pytest~=7.3",
    "pytest-xdist~=3.2",
    "pytest-cov~=4.1",
    "hypothesis~=6.87"
]
build = [
    "wheel",
    "twine",
    "check-wheel-contents",
]

[project.urls]
Homepage = "https://github.com/dbt-labs/dbt-common"
Repository = "https://github.com/dbt-labs/dbt-common.git"
Issues = "https://github.com/dbt-labs/dbt-common/issues"
Changelog = "https://github.com/dbt-labs/dbt-common/blob/main/CHANGELOG.md"

[tool.hatch.version]
path = "dbt_common/__about__.py"

### Default env & scripts

[tool.hatch.envs.default]
description = "Default environment with dependencies for running dbt-common"
features = ["lint", "test"]

[tool.hatch.envs.default.scripts]
proto = "protoc -I=./dbt_common/events --python_out=./dbt_common/events ./dbt_common/events/types.proto"

### Test settings, envs & scripts

[tool.hatch.envs.test]
description = "Env for running development commands for testing"
features = ["test"]

[tool.hatch.envs.test.scripts]
unit = "python -m pytest --cov=dbt_common --cov-report=xml {args:tests/unit}"


### Linting settings, envs & scripts

[tool.hatch.envs.lint]
type = "virtual"
description = "Env for running development commands for linting"
features = ["lint"]

[tool.hatch.envs.lint.scripts]
all = [
    "- black",
    "- flake8",
    "- mypy",
]
black = "python -m black ."
flake8 = "python -m flake8 ."
mypy = "python -m mypy ."

[tool.black]
extend-exclude = "dbt_common/events/types_pb2.py"
line-length = 99
target-version = ['py38']

[tool.flake8]
max-line-length = 99
select = ["E", "W", "F"]
ignore = ["E203", "E501", "E741", "W503", "W504"]
exclude = [
    "dbt_common/events/types_pb2.py",
    "venv",
    "env*"
]
per-file-ignores = ["*/__init__.py: F401"]
docstring-convention = "google"

[tool.mypy]
mypy_path = "third-party-stubs/"
namespace_packages = true
warn_unused_configs = true
show_error_codes = true
disable_error_code = "attr-defined"  # TODO: revisit once other mypy errors resolved
disallow_untyped_defs = false # TODO: add type annotations everywhere
warn_redundant_casts = true
exclude = [
    "dbt_common/events/types_pb2.py",
    "env*",
    "third-party-stubs/*",
]

### Build settings, envs & scripts

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/.changes",
  ".changie.yaml",
  ".gitignore",
  ".pre-commit-config.yaml",
  "CONTRIBUTING.md",
  "/tests",
]

[tool.hatch.build.targets.wheel]
packages = ["dbt_common"]

[tool.hatch.envs.build]
description = "Env for running development commands for linting"
features = ["build"]

[tool.hatch.envs.build.scripts]
check-all = [
    "- check-wheel",
    "- check-sdist",
]
check-wheel = [
    "twine check dist/*",
    "find ./dist/dbt_common-*.whl -maxdepth 1 -type f | xargs python -m pip install --force-reinstall --find-links=dist/",
    "pip freeze | grep dbt-common",
]
check-sdist = [
    "check-wheel-contents dist/*.whl --ignore W007,W008",
    "find ./dist/dbt_common-*.gz -maxdepth 1 -type f | xargs python -m pip install --force-reinstall --find-links=dist/",
    "pip freeze | grep dbt-common",
]
