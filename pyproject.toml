[project]
name = "dbt-common"
dynamic = ["version"]
description = "The shared common utilities that dbt-core and adapter implementations use"
readme = "README.md"
requires-python = ">=3.8"
license = "Apache-2.0"
keywords = []
authors = [
  { name = "dbt Labs", email = "info@dbtlabs.com" },
]
maintainers = [
    { name = "dbt Labs", email = "info@dbtlabs.com" },
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "agate~=1.7.0",
  "colorama>=0.3.9,<0.5",
  "isodate>=0.6,<0.7",
  "jsonschema~=4.0",
  "Jinja2~=3.0",
  "mashumaro[msgpack]~=3.9",
  "pathspec>=0.9,<0.12", # TODO: I'm not sure this is needed.  check search.py?
  "protobuf>=4.0.0",
  "python-dateutil~=2.0",
  "requests<3.0.0",
  "typing-extensions~=4.4",
]
[project.optional-dependencies]
lint = [
    "black~=23.3",
    "flake8",
    "Flake8-pyproject",
    "mypy~=1.3",
    "ruff==0.1.11",
    "types-Jinja2~=2.11",
    "types-jsonschema~=4.17",
    "types-protobuf~=4.24.0",
    "types-python-dateutil~=2.8",
    "types-PyYAML~=6.0",
    "types-requests<2.31.0" # types-requests 2.31.0.8 requires urllib3>=2, but we pin urllib3 ~= 1.0 because of openssl requirement for requests

]
test = [
    "pytest~=7.3",
#     "pytest-dotenv",
    "pytest-xdist~=3.2",
    "hypothesis~=6.87"
]

[project.urls]
Homepage = "https://github.com/dbt-labs/dbt-common"  # TODO: should this be dbt's homepage?
Repository = "https://github.com/dbt-labs/dbt-common.git"
Issues = "https://github.com/dbt-labs/dbt-common/issues"
Changelog = "https://github.com/dbt-labs/dbt-common/blob/main/CHANGELOG.md"

[tool.hatch.version]
path = "dbt_common/__about__.py"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/.changes",
  ".changie.yaml",
  ".gitignore",
  ".pre-commit-config.yaml",
  "CONTRIBUTING.md",
  "MAKEFILE",  # TODO: remove once we remove the makefile
  "/tests",
]

[tool.hatch.build.targets.wheel]
packages = ["dbt_common"]

[tool.hatch.version]
path = "dbt_common/__about__.py"

# [tool.hatch.envs.dev.scripts]
# all = ["pre-commit run --all-files"]

[tool.hatch.envs.default]
description = "Env for running development commands like pytest & linting"
features = ["lint", "test"]

# these are the commands that you run with `hatch run <cmd>` for local dev & CI
[tool.hatch.envs.default.scripts]
# This edits your local pre-commit hook file to use Hatch when executing.
# TODO: move to it's own env that only installs pre-commit - may need to live here though?
setup-pre-commit = 'sed -i -e "s/exec /exec hatch run /g" .git/hooks/pre-commit'
unit-tests = "- python -m pytest {args:tests/unit}"
lint-all = [
    "- lint-black",
    "- lint-flake8",
    "- lint-mypy",
]
lint-black = "python -m black ."
lint-flake8 = "python -m flake8 ."
lint-mypy = "python -m mypy ."
proto = "protoc -I=./dbt_common/events --python_out=./dbt_common/events ./dbt_common/events/types.proto"
lint = ["black --check --diff {args:.}", "ruff check {args:.}", "mypy {args:.}"]
format = ["black {args:.}", "ruff --fix --exit-non-zero-on-fix {args:.}"]

# ruff replaces flake8!
[tool.ruff]
line-length = 99
select = [
  "E", # Pycodestyle
  "F", # Pyflakes
  "W", # Whitespace
  "D", # Pydocs
]
ignore = [
  # Missing docstring in public module -- often docs handled within classes
  "D100",
  # Missing docstring in public class
  "D101",
  # Missing docstring in public method
  "D102",
  # Missing docstring in public function
  "D103",
  # Missing docstring in public package -- often docs handled within files not __init__.py
  "D104",
  # Missing docstring in magic method
  "D105",
  # Missing docstring in public nested class
  "D106",
  # Missing docstring in __init__
  "D107",
]
# Let ruff autofix these errors.
# F401 - Unused imports.
# E501 - Line too long.
# W292 - No newline at end of file.
fixable = ["F401", "E501", "W292"]
exclude = [
    "dbt_common/events/types_pb2.py",
    "env*",
    "third-party-stubs/*",
]

[tool.ruff.per-file-ignores]
"types_pb2.py" = ["E501", "E712", "F821"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.black]
extend-exclude = "dbt_common/events/types_pb2.py"
line-length = 99
target-version = ['py38']

[tool.flake8]
select = ["E", "W", "F"]
ignore = ["E203", "E501", "E741", "W503", "W504"]
exclude = [
    "dbt_common/events/types_pb2.py",
    "tests",
    "venv",
    "env*"
]
per-file-ignores = ["*/__init__.py: F401"]

[tool.mypy]
mypy_path = "third-party-stubs/"
namespace_packages = true
warn_unused_configs = true
show_error_codes = true
disable_error_code = "attr-defined"  # TODO: revisit once other mypy errors resolved
disallow_untyped_defs = false # TODO: add type annotations everywhere
warn_redundant_casts = true
exclude = [
    "dbt_common/events/types_pb2.py",
    "env*",
    "third-party-stubs/*",
]

[[tool.mypy.overrides]]
module = ["dbt_common.events.types_pb2.py"]
follow_imports = "skip"
