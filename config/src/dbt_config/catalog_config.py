# generated by datamodel-codegen:
#   filename:  external_config.json
#   timestamp: 2024-10-09T19:40:39+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import AnyUrl, BaseModel, Field


class InternalNamespace(BaseModel):
    database: str = Field(..., description='The database')
    schema_: str = Field(..., alias='schema', description='The schema')


class IcebergConfiguration(BaseModel):
    table_format: str = Field(..., description='The table format')
    catalog_namespace: Optional[str] = Field('dbt', description='The namespace')
    internal_namespace: InternalNamespace
    external_location: AnyUrl = Field(..., description='The external location')


class GlueConfiguration(BaseModel):
    table_format: str = Field(..., description='The table format')
    namespace: Optional[str] = Field('dbt', description='The namespace')
    external_location: AnyUrl = Field(..., description='The external location')
    aws_account_id: Optional[str] = Field(None, description='The AWS account ID')
    role_arn: Optional[str] = Field(None, description='The role ARN')


class Refresh(Enum):
    on_start = 'on-start'
    never = 'never'
    just_in_time = 'just-in-time'


class Management(BaseModel):
    enabled: Optional[bool] = Field(True, description='Whether management is enabled')
    create_if_not_exists: Optional[bool] = Field(
        False, description='Whether to create the external catalog if it does not exist'
    )
    alter_if_different: Optional[bool] = Field(
        False, description='Whether to alter the external catalog if it exists'
    )
    read_only: Optional[bool] = Field(
        True, description='Whether the external catalog is read-only'
    )
    refresh: Optional[Refresh] = Field(
        'on-start', description='Whether to refresh the external catalog'
    )


class Type(Enum):
    iceberg = 'iceberg'
    glue = 'glue'


class ExternalCatalog(BaseModel):
    name: str = Field(..., description='The name of the external catalog')
    type: Type
    configuration: Union[IcebergConfiguration]
    management: Management


class ExternalCatalogConfig(BaseModel):
    catalogs: List[ExternalCatalog]
